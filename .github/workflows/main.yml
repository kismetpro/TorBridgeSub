name: Fetch Tor WebTunnel Bridges

on:
  schedule:
    - cron: '*/5 * * * *'  # 每 5 分钟执行一次（UTC 时间）
  workflow_dispatch:

jobs:
  fetch-and-save:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests beautifulsoup4 fake-useragent

      - name: Fetch and clean bridge text
        run: |
          mkdir -p output
          python <<'EOF'
          import requests
          from bs4 import BeautifulSoup
          from fake_useragent import UserAgent
          from datetime import datetime
          import time
          import random

          def fetch_page(url, max_retries=5):
              ua = UserAgent()
              for attempt in range(max_retries):
                  try:
                      headers = {
                          "User-Agent": ua.random,
                          "Referer": "https://torproject.org/",
                          "Accept-Language": "en-US,en;q=0.9",
                          "DNT": "1",
                          "Connection": "keep-alive",
                      }
                      session = requests.Session()
                      session.headers.update(headers)
                      response = session.get(url, timeout=10)
                      if response.status_code == 200:
                          return response.text
                      time.sleep(random.uniform(1, 3))
                  except Exception as e:
                      print(f"Retry {attempt+1}/{max_retries}: {e}")
                      time.sleep(random.uniform(2, 5))
              raise Exception("Failed to fetch page after retries")

          url = "https://bridges.torproject.org/bridges?transport=webtunnel&ipv6=yes"
          html = fetch_page(url)

          soup = BeautifulSoup(html, "html.parser")
          bridgelines_div = soup.find("div", {"id": "bridgelines"})

          if bridgelines_div is None:
              raise RuntimeError("Bridge lines not found.")

          lines = bridgelines_div.get_text(separator="\n").splitlines()
          bridge_lines = "\n".join(line.strip() for line in lines if line.strip())

          filename = datetime.utcnow().strftime("output/%Y-%m-%d_%H-%M-%S.txt")

          with open(filename, "w") as f:
              f.write(bridge_lines)

          print(f"Saved bridge lines to {filename}")
          EOF

      - name: Commit and push bridge file
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add output/
          git commit -m "Add bridge file on $(date -u '+%Y-%m-%d %H:%M:%S')" || echo "No changes"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
